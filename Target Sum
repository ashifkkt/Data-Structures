Given an array of integers (arr) and a target sum (target), write a function that finds and returns a pair of numbers within the array that add up to the target. If no such pair exists, return null.  Optimize for time complexity.

function findPairWithSum(arr, target) {
  const seenNumbers = new Map(); // Use a Map to store numbers and their indices

  for (let i = 0; i < arr.length; i++) {
    const num = arr[i];
    const complement = target - num;

    if (seenNumbers.has(complement)) {
      return [num,complement]; // Return indices of the pair
    }

    seenNumbers.set(num, i); // Store the number and its index
  }

  return null; // No pair found
}


The findPairWithSum function quickly locates a pair of numbers in an array that add up to a target value. It uses a map to keep track of previously seen numbers.  For each number, it checks if its complement (the number needed to reach the target) exists in the map. If so, the pair is found. If not, the current number is added to the map for future reference.  This approach avoids nested loops, making it faster for large arrays.
